// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}
// Modelo para Ingredientes
// Modelo para Ingredientes

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String  @unique
  unit      String      // Unidad de medida (kg, litro, etc.)
  price     Float       // Precio unitario
  quantity  Float       // Cantidad en stock o cantidad base
  products  ProductIngredient[]
}

model Product {
  id                Int                 @id @default(autoincrement())
  name              String               // Nombre del producto (ej. Raviolones)
  portions          Int                 // Cantidad de porciones
  costPerPortion    Float               // Costo calculado por porción
  priceWithoutTax   Float               // Precio antes de impuestos
  tax               Float               // Impuesto
  //El finalPrice de cada ingrediente representa el costo total de ese ingrediente en el producto.
  finalPrice        Float               // Precio final con impuestos
  roundedPrice      Float               // Precio redondeado
  profitPercentage  Float?             // Porcentaje de ganancia
  profitAmount      Float?              // Resultado de ganancia calculado (opcional)
  pricePerPortion   Float?               // Nuevo campo: Precio por porción final con ganancia e impuestos
  ingredients       ProductIngredient[]  // Relación con ingredientes
}

model ProductIngredient {
  id            Int         @id @default(autoincrement())
  //ondelete, cascade elimina las relaciones para que el producto se pueda eleminar
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     Int
  ingredient    Ingredient  @relation(fields: [ingredientId], references: [id])
  ingredientId  Int
  quantity      Float       // Cantidad de este ingrediente en el producto
  pricePerUnit  Float       // Precio unitario del ingrediente en el contexto del producto
  finalPrice    Float       // Precio final (quantity * pricePerUnit)
}

// model Ingredient {
//   id       Int      @id @default(autoincrement())
//   name     String
//   unit     String
//   price    Float
//   quantity Float
//   products ProductIngredient[]
// }

// model Product {
//   id          Int      @id @default(autoincrement())
//   name        String
//   ingredients ProductIngredient[]
// }

// model ProductIngredient {
//   id           Int       @id @default(autoincrement())
//   product      Product   @relation(fields: [productId], references: [id])
//   productId    Int
//   ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
//   ingredientId Int
//   quantity     Float
//   pricePerUnit Float    // Precio por unidad
//   finalPrice   Float    // Precio final (cantidad * precio por unidad)
// }

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql" // o "mysql", según tu base de datos
//   url      = env("DATABASE_URL")
// }

// model User {
//   id        Int      @id @default(autoincrement())
//   name      String
//   email     String   @unique
//   password  String
//   createdAt DateTime @default(now())
// }

// model Product {
//   id          Int      @id @default(autoincrement())
//   name        String
//   description String?
//   price       Float
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }
