// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}
//MODELOS NUEVOS
model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  unit      String       // Unidad de medida (kg, litro, etc.)
  price     Float        // Precio unitario
  quantity  Float        // Cantidad en stock o cantidad base
  products  ProductIngredient[]
}

model Product {
  id                Int                 @id @default(autoincrement())
  name              String              @unique // Nombre del producto (ej. Raviolones)
  portions          Int                 // Cantidad de porciones
  costPerPortion    Float               // Costo calculado por porción
  priceWithoutTax   Float               // Precio antes de impuestos
  tax               Float               // Impuesto
  finalPrice        Float               // Precio final con impuestos
  roundedPrice      Float               // Precio redondeado
  profitPercentage  Float?              // Porcentaje de ganancia
  profitAmount      Float?              // Resultado de ganancia calculado (opcional)
  pricePerPortion   Float?              // Precio por porción final con ganancia e impuestos
  ingredients       ProductIngredient[] // Relación con ingredientes
  stock             ProductStock?       // Relación uno a uno con el stock
  logs              ProductStockLog[]   // Historial de movimientos de stock
  sales             SaleProduct[]       // Relación con ventas
}

model ProductIngredient {
  id            Int         @id @default(autoincrement())
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     Int
  ingredient    Ingredient  @relation(fields: [ingredientId], references: [id])
  ingredientId  Int
  quantity      Float       // Cantidad de este ingrediente en el producto
  pricePerUnit  Float       // Precio unitario del ingrediente en el contexto del producto
  finalPrice    Float       // Precio final (quantity * pricePerUnit)
}

model ProductStock {
  id            Int        @id @default(autoincrement())
  productId     Int        @unique
  product       Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  stock         Int        @default(0) // Cantidad total de porciones disponibles
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model ProductStockLog {
  id            Int        @id @default(autoincrement())
  productId     Int
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  type          StockType   // Tipo de movimiento: PRODUCED, DEFECTIVE, SALE, ADJUSTMENT
  quantity      Int         // Cantidad que afecta al stock (positivo o negativo)
  comment       String?     // Comentario opcional (ej. "Producción del turno mañana")
  createdAt     DateTime    @default(now())

  @@index([productId, createdAt])
}

enum StockType {
  PRODUCIDO    // Porciones producidas
  DEFECTUOSO   // Porciones defectuosas
  VENDIDO        // Porciones vendidas
  AJUSTE  // Ajustes manuales
}

model Client {
  id        Int       @id @default(autoincrement())
  name      String    // Nombre del cliente
  email     String?   @unique // Correo del cliente (opcional)
  phone     String?   // Teléfono del cliente (opcional)
  sales     Sale[]    // Relación con las ventas realizadas por este cliente
}

model Sale {
  id              Int           @id @default(autoincrement())
  clientId        Int
  client          Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  date            DateTime      @default(now()) // Fecha de la venta
  totalAmount     Float         // Monto total de la venta (calculado)
  products        SaleProduct[] // Relación con los productos vendidos
  paymentMethod   PaymentMethod // Método de pago
}

model SaleProduct {
  id          Int      @id @default(autoincrement())
  saleId      Int
  sale        Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int      // Cantidad vendida de este producto
  totalPrice  Float    // Precio total (quantity * pricePerPortion)
}

enum PaymentMethod {
  EFECTIVO                // Efectivo
  TRANSFERENCIA            // Transferencia
  POSNET              // POSNET
  POSNET_CUOTAS // POSNET en cuotas
}
//EXPENSAS
model Expense {
  id            Int       @id @default(autoincrement())
  name          String    // Nombre del gasto (Ej: "Alquiler", "Compra de maquinaria")
  amount        Float     // Monto del gasto
  date          DateTime  // Fecha del gasto
  type          ExpenseType // Tipo de gasto (único o recurrente)
  recurrence    Recurrence? // Opcional, solo si es recurrente
  createdAt     DateTime  @default(now()) // Fecha de creación
  updatedAt     DateTime  @updatedAt // Fecha de última actualización
}

// Enum para tipos de gastos
enum ExpenseType {
  GASTOUNICO  // Gasto único
  GASTOMENSUAL // Gasto recurrente
}

// Enum para frecuencia de gastos recurrentes
enum Recurrence {
  DIARIO
  SEMANAL
  MENSUAL
  ANUAL
}


//MODELOS ORIGINALES 
// model Ingredient {
//   id        Int      @id @default(autoincrement())
//   name      String  @unique
//   unit      String      // Unidad de medida (kg, litro, etc.)
//   price     Float       // Precio unitario
//   quantity  Float       // Cantidad en stock o cantidad base
//   products  ProductIngredient[]
// }

// model Product {
//   id                Int                 @id @default(autoincrement())
//   name              String              @unique // Nombre del producto (ej. Raviolones)
//   portions          Int                 // Cantidad de porciones
//   costPerPortion    Float               // Costo calculado por porción
//   priceWithoutTax   Float               // Precio antes de impuestos
//   tax               Float               // Impuesto
//   //El finalPrice de cada ingrediente representa el costo total de ese ingrediente en el producto.
//   finalPrice        Float               // Precio final con impuestos
//   roundedPrice      Float               // Precio redondeado
//   profitPercentage  Float?             // Porcentaje de ganancia
//   profitAmount      Float?              // Resultado de ganancia calculado (opcional)
//   pricePerPortion   Float?               // Nuevo campo: Precio por porción final con ganancia e impuestos
//   ingredients       ProductIngredient[]  // Relación con ingredientes
//   //NUEVAS RELACIONES 2DA IMPLEMENTACION 
//    stock             ProductStock[]   // Relación con ProductStock (corrección)
//   orderProducts     OrderProduct[]   // Relación con OrderProduct (corrección)
//     logs            ProductStockLog[]   // Historial de movimientos de stock

// }
// model ProductStockLog {
//   id            Int        @id @default(autoincrement())
//   productId     Int
//   product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
//   type          StockType   // Tipo de movimiento: PRODUCED, DEFECTIVE, SALE, ADJUSTMENT
//   quantity      Int         // Cantidad que afecta al stock (positivo o negativo)
//   comment       String?     // Comentario opcional (ej. "Producción del turno mañana")
//   createdAt     DateTime    @default(now())

//   @@index([productId, createdAt])
// }

// enum StockType {
//   PRODUCED    // Porciones producidas
//   DEFECTIVE   // Porciones defectuosas
//   SALE        // Porciones vendidas
//   ADJUSTMENT  // Ajustes manuales
// }
// model ProductIngredient {
//   id            Int         @id @default(autoincrement())
//   //ondelete, cascade elimina las relaciones para que el producto se pueda eleminar
//   product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId     Int
//   ingredient    Ingredient  @relation(fields: [ingredientId], references: [id])
//   ingredientId  Int
//   quantity      Float       // Cantidad de este ingrediente en el producto
//   pricePerUnit  Float       // Precio unitario del ingrediente en el contexto del producto
//   finalPrice    Float       // Precio final (quantity * pricePerUnit)
// }
// model ProductStock {
//   id            Int     @id @default(autoincrement())
//   productId     Int     @unique
//   product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   stock         Int@default(0)     // Cantidad total de porciones disponibles
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
// }

// model Client {
//   id        Int       @id @default(autoincrement())
//   name      String    // Nombre del cliente
//   email     String?   @unique // Correo del cliente (opcional)
//   phone     String?   // Teléfono del cliente (opcional)
//   orders    Order[]   // Relación con los pedidos
// }

// model Order {
//   id            Int            @id @default(autoincrement())
//   clientId      Int
//   client        Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
//   date          DateTime       @default(now()) // Fecha del pedido
//   totalAmount   Float          // Monto total del pedido
//   paymentMethod PaymentMethod  // Método de pago
//   products      OrderProduct[] // Relación con los productos del pedido
// }

// model OrderProduct {
//   id            Int      @id @default(autoincrement())
//   orderId       Int
//   order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   productId     Int
//   product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   quantity      Int      // Cantidad del producto en el pedido
//   totalPrice    Float    // Precio total para este producto en el pedido
// }

// enum PaymentMethod {
//   CASH                // Efectivo
//   TRANSFER            // Transferencia
//   POSNET              // POSNET
//   POSNET_INSTALLMENTS // POSNET en cuotas
// }

// model ProductStock {
//   id                 Int       @id @default(autoincrement())
//   productId          Int
//   product            Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
//   date               DateTime  @default(now()) // Fecha del registro
//   quantityProduced   Int       // Cantidad de productos producidos
//   quantityDefective  Int       // Cantidad de productos no aptos para venta
//   quantityAvailable  Int       // Cantidad disponible para venta (calculado como stock acumulado)
//   waste              Int       // Cantidad de desperdicio
// }
//  model Client {
//   id        Int      @id @default(autoincrement())
//   name      String   // Nombre del cliente
//   email     String?  @unique // Correo del cliente (opcional)
//   phone     String?  // Teléfono del cliente (opcional)
//   orders    Order[]  // Relación con los pedidos
// }

// model OrderProduct {
//   id            Int      @id @default(autoincrement())
//   orderId       Int
//   order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   productId     Int
//   product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   quantity      Int      // Cantidad del producto en el pedido
//   totalPrice    Float    // Precio total para este producto en el pedido
// }
// model Order {
//   id            Int       @id @default(autoincrement())
//   clientId      Int
//   client        Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
//   date          DateTime  @default(now()) // Fecha del pedido
//   totalAmount   Float     // Monto total del pedido
//   paymentMethod PaymentMethod
//   products      OrderProduct[]
// }

// enum PaymentMethod {
//   CASH          // Efectivo
//   TRANSFER      // Transferencia
//   POSNET        // POSNET
//   POSNET_INSTALLMENTS // POSNET en cuotas
// }

// model Ingredient {
//   id       Int      @id @default(autoincrement())
//   name     String
//   unit     String
//   price    Float
//   quantity Float
//   products ProductIngredient[]
// }

// model Product {
//   id          Int      @id @default(autoincrement())
//   name        String
//   ingredients ProductIngredient[]
// }

// model ProductIngredient {
//   id           Int       @id @default(autoincrement())
//   product      Product   @relation(fields: [productId], references: [id])
//   productId    Int
//   ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
//   ingredientId Int
//   quantity     Float
//   pricePerUnit Float    // Precio por unidad
//   finalPrice   Float    // Precio final (cantidad * precio por unidad)
// }

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql" // o "mysql", según tu base de datos
//   url      = env("DATABASE_URL")
// }

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Product {
//   id          Int      @id @default(autoincrement())
//   name        String
//   description String?
//   price       Float
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }


// model Product {
//   id          Int      @id @default(autoincrement())
//   name        String
//   description String?
//   price       Float
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }


// model Product {
//   id          Int      @id @default(autoincrement())
//   name        String
//   description String?
//   price       Float
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }


// model Product {
//   id          Int      @id @default(autoincrement())
//   name        String
//   description String?
//   price       Float
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// model Product {
//   id          Int      @id @default(autoincrement())
//   name        String
//   description String?
//   price       Float
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }
